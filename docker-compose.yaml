
version: '1.0'

services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
    extends:
      file: common-config.yaml
      service: network-deploy-service
      
  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    expose:
      - "9093"
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "my-topic:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    extends:
      file: common-config.yaml
      service: network-deploy-service
  orderdb:
    container_name: orderdb
    ports:
      - 3307:3306
    environment:
      MYSQL_DATABASE: orderdb
      # MYSQL_USER: orderdb
      # MYSQL_PASSWORD: orderdb
    extends:
      file: common-config.yaml
      service: microservice-db-config

  order_service:
    image: 'yfangvjoker/order-service:s1'
    container_name: order_service
    ports:
      - "9000:9000"
    depends_on:
      orderdb:
        condition: service_healthy
      kafka:
        condition: service_started
    healthcheck:
      test: "curl --fail --silent localhost:9000/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "order"
      SPRING_DATASOURCE_URL: "jdbc:mysql://orderdb:3306/orderdb"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9093
    extends:
      file: common-config.yaml
      service: microservice-detail-config
  
  # productdb:
  #   image: 'postgres:12.21'
  #   shm_size: 128mb
  #   environment:
  #     POSTGRES_PASSWORD: postgres
  # product_service:
  #   image: 'yfangvjoker/product-service:v1'
  #   container_name: product_service
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     FLASK_APP: app.py
  #   extends:
  #     file: common-config.yaml
  #     service: microservice-detail-config

networks:
  demo-datn:
    driver: bridge
