name: Build

on:
  push:
    branches:
      - main


jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      # Install unzip
      - name: Install unzip
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip
      # Set up Java environment for Maven
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Build Docker image for order_service
      - name: Build order_service Docker image
        working-directory: order-service
        run: |
          ./mvnw compile jib:dockerBuild

      # Set up Python environment for Flask
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Install dependencies and build product_service Docker image
      - name: Build product_service Docker image
        working-directory: product_service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          docker build -t yfangvjoker/product_service:latest .

      # Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version

      # Run Docker Compose to start the project
      - name: Run Docker Compose
        run: |
          docker-compose up -d

      # Verify Docker containers are running (Optional)
      - name: Verify Docker containers
        run: docker ps
      - uses: sonarsource/sonarqube-scan-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@v1
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
